import { ElectrumApiInterface } from "./electrum-api.interface";
export declare class ElectrumApiMock implements ElectrumApiInterface {
    private sendTransactionCallback;
    private getUnspentAddressCallBack;
    private getUnspentScripthashCallBack;
    private getTxCallback;
    private isOpenFlag;
    constructor();
    close(): Promise<void>;
    open(): Promise<void>;
    isOpen(): boolean;
    dump(): Promise<void>;
    resetConnection(): Promise<void>;
    atomicalsGetGlobal(hashes: number): Promise<null>;
    setSendTransaction(cb: Function): Function;
    sendTransaction(rawtx: string): Promise<string>;
    setGetUnspentAddress(cb: Function): Function;
    getUnspentAddress(address: string): Promise<any>;
    setGetUnspentScripthash(cb: Function): Function;
    getUnspentScripthash(scripthash: string): Promise<any>;
    setGetTx(cb: Function): Function;
    getTx(txid: string, verbose?: boolean): Promise<any>;
    waitUntilUTXO(address: string, satoshis: number, intervalSeconds?: number): Promise<any>;
    serverVersion(): Promise<any>;
    broadcast(rawtx: string, force?: boolean): Promise<any>;
    history(scripthash: string): Promise<any>;
    atomicalsGet(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsGetFtInfo(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsGetLocation(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsGetState(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsGetStateHistory(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsGetEventHistory(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsGetTxHistory(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsList(limit: number, offset: number, asc: boolean): Promise<any>;
    atomicalsByScripthash(scripthash: string, verbose?: boolean): Promise<any>;
    atomicalsByAddress(address: string): Promise<any>;
    atomicalsAtLocation(location: string): Promise<any>;
    atomicalsGetMintData(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsGetByRealm(realm: string): Promise<any>;
    atomicalsGetRealmInfo(realmOrSubRealm: string, verbose?: boolean): Promise<any>;
    atomicalsGetByTicker(ticker: string): Promise<any>;
    atomicalsGetByContainer(container: string): Promise<any>;
    atomicalsGetContainerItems(container: string, limit: number, offset: number): Promise<any>;
    atomicalsGetByContainerItem(container: string, item: string): Promise<any>;
    atomicalsGetByContainerItemValidated(container: string, item: string, bitworkc: string, bitworkr: string, main: string, mainHash: string, proof: any, checkWithoutSealed: boolean): Promise<any>;
    atomicalsFindTickers(tickerPrefix: string | null, asc?: boolean): Promise<any>;
    atomicalsFindContainers(containerPrefix: string | null, asc?: boolean): Promise<any>;
    atomicalsFindRealms(realmPrefix: string | null, asc?: boolean): Promise<any>;
    atomicalsFindSubRealms(parentRealmId: string, subrealmPrefix: string | null, asc?: boolean): Promise<any>;
}
