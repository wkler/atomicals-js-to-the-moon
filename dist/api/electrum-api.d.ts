import { ElectrumApiInterface, IUnspentResponse } from "./electrum-api.interface";
import { UTXO } from "../types/UTXO.interface";
export declare class ElectrumApi implements ElectrumApiInterface {
    private baseUrl;
    private usePost;
    private isOpenFlag;
    private constructor();
    resetConnection(): Promise<void>;
    static createClient(url: string, usePost?: boolean): ElectrumApi;
    open(): Promise<any>;
    isOpen(): boolean;
    close(): Promise<any>;
    call(method: any, params: any): Promise<any>;
    sendTransaction(signedRawTx: string): Promise<any>;
    getTx(txId: string, verbose?: boolean): Promise<any>;
    getUnspentAddress(address: string): Promise<IUnspentResponse | any>;
    getUnspentScripthash(scriptHash: string): Promise<IUnspentResponse | any>;
    waitUntilUTXO(address: string, satoshis: number, intervalSeconds?: number, exactSatoshiAmount?: boolean): Promise<UTXO>;
    serverVersion(): Promise<any>;
    broadcast(rawtx: string, force?: boolean): Promise<any>;
    dump(): Promise<any>;
    atomicalsGetGlobal(hashes: number): Promise<any>;
    atomicalsGet(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsGetFtInfo(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsGetLocation(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsGetStateHistory(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsGetState(atomicalAliasOrId: string | number, verbose: boolean): Promise<any>;
    atomicalsGetEventHistory(atomicalAliasOrId: string | number): Promise<any>;
    atomicalsGetTxHistory(atomicalAliasOrId: string | number): Promise<any>;
    history(scripthash: string): Promise<any>;
    atomicalsList(limit: number, offset: number, asc?: boolean): Promise<any>;
    atomicalsByScripthash(scripthash: string, verbose?: boolean): Promise<any>;
    atomicalsByAddress(address: string): Promise<any>;
    atomicalsAtLocation(location: string): Promise<any>;
    txs(txs: string[], verbose: boolean): Promise<any>;
    atomicalsGetRealmInfo(realmOrSubRealm: string, verbose?: boolean): Promise<any>;
    atomicalsGetByRealm(realm: string): Promise<any>;
    atomicalsGetByTicker(ticker: string): Promise<any>;
    atomicalsGetByContainer(container: string): Promise<any>;
    atomicalsGetContainerItems(container: string, limit: number, offset: number): Promise<any>;
    atomicalsGetByContainerItem(container: string, itemName: string): Promise<any>;
    atomicalsGetByContainerItemValidated(container: string, item: string, bitworkc: string, bitworkr: string, main: string, mainHash: string, proof: any, checkWithoutSealed: boolean): Promise<any>;
    atomicalsFindTickers(prefix: string | null, asc?: boolean): Promise<any>;
    atomicalsFindContainers(prefix: string | null, asc?: boolean): Promise<any>;
    atomicalsFindRealms(prefix: string | null, asc?: boolean): Promise<any>;
    atomicalsFindSubRealms(parentRealmId: string, prefix: string | null, asc?: boolean): Promise<any>;
}
